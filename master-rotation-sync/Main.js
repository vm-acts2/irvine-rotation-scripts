function run() {

  clearSheetByName("Weekly Rotation - Autogenerated");
  outputSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Weekly Rotation - Autogenerated");
  hideColumnsToRightOfLetter(outputSheet, "N");
  headerColumn = 1

  populateHeaders(outputSheet, headerColumn);

}

function mergeJsonOutputs(lists) {
  var eventsByDate = new Map();

  lists.forEach(list => {
    list.forEach(item => {
      var dateKey = item.date;
      
      item.events.forEach(event => {
        // Create a composite key for unique events by date and name
        var eventKey = dateKey + '|' + event.name;
        
        if (!eventsByDate.has(dateKey)) {
          eventsByDate.set(dateKey, { date: item.date, events: new Map() });
        }
        
        var eventsOnDate = eventsByDate.get(dateKey).events;
        if (!eventsOnDate.has(eventKey)) {
          // Initialize with the event structure, including an empty categories array if needed
          eventsOnDate.set(eventKey, { name: event.name, categories: [] });
        }
        
        // Now, merge categories for the same event
        var existingEvent = eventsOnDate.get(eventKey);
        event.categories.forEach(category => {
          var existingCategory = existingEvent.categories.find(c => c.name === category.name);
          if (existingCategory) {
            // Optionally merge details within the same category, like members
            existingCategory.members = [...new Set([...existingCategory.members, ...category.members])];
          } else {
            existingEvent.categories.push(category);
          }
        });
      });
    });
  });

  // Convert the map structures back into arrays
  var mergedList = Array.from(eventsByDate, ([, {date, events}]) => ({
    date: date,
    events: Array.from(events, ([, event]) => event)
  }));

  // Optional: Sort the merged list by date
  mergedList.sort((a, b) => new Date(a.date) - new Date(b.date));

  return mergedList;
}

function buildMasterRotationFromJsonData(outputSheet, rotationOutputJson) {
  currentRow = 2
  populateHeaders(outputSheet, currentRow);
  currentRow += 1; 
  
  // Iterate over each item in the array
  for (var i = 0; i < rotationOutputJson.length; i++) {
    var dayEvents = rotationOutputJson[i];
    populateDateHeader(outputSheet, currentRow, dayEvents.date);
    currentRow += 1;
    
    // Iterate over each event in the events array
    for (var j = 0; j < dayEvents.events.length; j++) {
      var event = dayEvents.events[j];
      
      populateEventHeader(outputSheet, currentRow, event.name);
      currentRow += 1;
      
      // Iterate over each category in the categories array
      for (var k = 0; k < event.categories.length; k++) {
        var category = event.categories[k];
        populateEvent(outputSheet, currentRow, category.name, category.location, category.lead, category.members)
        currentRow += 1
      } 
    }
  }
}